extends Sprite2D

# This script demonstrates how to load and use assets generated by SpriteShift AI.

# Exported variables will be editable in the Godot Inspector.
@export var sprite_sheet_path: String = "res://assets/character_sprites.png"
@export var metadata_path: String = "res://assets/character_anim.json"

var animations: Dictionary = {}
var current_animation: String = "idle"
var current_frame: int = 0
var frame_timer: float = 0.0

func _ready():
	# This function is called when the node enters the scene tree.
	load_character_data()
	play_animation("idle")

func _process(delta):
	# This function is called every frame.
	# We update the animation frame based on the time elapsed.
	frame_timer -= delta
	if frame_timer <= 0:
		advance_frame()

func load_character_data():
	# Load the sprite sheet texture.
	var texture = load(sprite_sheet_path)
	if texture:
		self.texture = texture
	else:
		print("Error: Could not load sprite sheet at ", sprite_sheet_path)
		return

	# Load and parse the animation metadata JSON file.
	var file = FileAccess.open(metadata_path, FileAccess.READ)
	if file:
		var json_data = JSON.parse_string(file.get_as_text())
		if json_data and json_data.has("animations"):
			animations = json_data["animations"]
			# Configure the sprite sheet for animation.
			# hframes is the number of horizontal frames in the sheet.
			# vframes is the number of vertical frames.
			hframes = json_data.get("h_frames", 1)
			vframes = json_data.get("v_frames", 1)
		else:
			print("Error: Invalid JSON format in ", metadata_path)
	else:
		print("Error: Could not load metadata file at ", metadata_path)

func play_animation(anim_name: String):
	# Plays a new animation if it exists.
	if animations.has(anim_name) and current_animation != anim_name:
		current_animation = anim_name
		current_frame = 0
		advance_frame()

func advance_frame():
	# Advances to the next frame in the current animation sequence.
	var anim_data = animations.get(current_animation)
	if not anim_data:
		return

	var frame_index = anim_data["frames"][current_frame]
	self.frame = frame_index # Set the visible frame of the sprite sheet.

	# Set the timer for the next frame change.
	frame_timer = anim_data["durations"][current_frame]

	# Loop the animation.
	current_frame = (current_frame + 1) % len(anim_data["frames"])

	# Here you would also update the character's hitboxes based on
	# the hitbox data for the current frame, e.g.:
	# update_hitboxes(anim_data["hitboxes"][frame_index])
